************************* STARTING *************************

functions declared but not defined:
  __builtin_expect
  __builtin_fabs
  __builtin_fabsl
  __builtin_memset
  __builtin_next_arg
  __builtin_stdarg_start
  __builtin_strcat
  __builtin_strchr
  __builtin_strncat
  __builtin_strpbrk
  __builtin_va_arg
  __builtin_va_copy
  __builtin_va_end
  __builtin_varargs_start
shared: &g:flowshare2.c:4
        &i:flowshare2.c:16
&g:flowshare2.c:4 is protected by:
  concrete l:flowshare2.c:31
  l:flowshare2.c:5

Warning: Possible data race: &i:flowshare2.c:16 is not protected!
 references:
  dereference at flowshare2.c:20
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      <empty>
    in: FORK at flowshare2.c:33 -> child2 flowshare2.c:33

  dereference at flowshare2.c:24
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      concrete l:flowshare2.c:31
      l:flowshare2.c:5
    in: FORK at flowshare2.c:33 -> child2 flowshare2.c:33

  dereference at flowshare2.c:20
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      <empty>
    in: FORK at flowshare2.c:32 -> child2 flowshare2.c:32

  dereference at flowshare2.c:24
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      concrete l:flowshare2.c:31
      l:flowshare2.c:5
    in: FORK at flowshare2.c:32 -> child2 flowshare2.c:32

  dereference at flowshare2.c:20
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      <empty>
    in: main at flowshare2.c:28 -> child2 flowshare2.c:33

  dereference at flowshare2.c:20
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      <empty>
    in: main at flowshare2.c:28 -> child2 flowshare2.c:32

  dereference at flowshare2.c:24
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      concrete l:flowshare2.c:31
      l:flowshare2.c:5
    in: main at flowshare2.c:28 -> child2 flowshare2.c:33

  dereference at flowshare2.c:24
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      concrete l:flowshare2.c:31
      l:flowshare2.c:5
    in: main at flowshare2.c:28 -> child2 flowshare2.c:32

  dereference at flowshare2.c:11
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      concrete l:flowshare2.c:31
      l:flowshare2.c:5
    in: FORK at flowshare2.c:21 -> child1 flowshare2.c:21

  dereference at flowshare2.c:11
    locations possibly dereferenced: 
      &i:flowshare2.c:16
      child1.data:flowshare2.c:19
      child1.data:flowshare2.c:21
    locks acquired at dereference: 
      concrete l:flowshare2.c:31
      l:flowshare2.c:5
    in: FORK at flowshare2.c:19 -> child1 flowshare2.c:19

*************************** DONE ***************************
